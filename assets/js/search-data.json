{
  
    
        "post0": {
            "title": "Donkey Republic queries",
            "content": "1. Task results . In this first part of the notebook I will answer the questions proposed by Jan, assuming that the table called rentals has already been created and each of the columns are formatted correctly. In the second section, I execute the queries and you can see that there is more than one workaround to be done in order to execute the queries. . Which user_id made the most rentals? | . Considering only finished rentals, teh query is given by: . SELECT user_id, count(distinct id) as &#39;# of rentals&#39; FROM rentals GROUP BY user_id ORDER BY count(distinct id) DESC LIMIT 1; . How many rentals did the bike_id with the most rentals have? | . The bike_id with the most rentals (effective rentals, i.e. finished) is obtained by: . SELECT bike_id, count(distinct id) as &#39;# of rentals&#39; FROM rentals WHERE state=&quot;finished&quot; GROUP BY bike_id ORDER BY count(distinct id) DESC LIMIT 1; . What %-share of the total number of rentals was cancelled? | . The result is obtained just by averaging the column state: . SELECT AVG(state=&#39;cancelled&#39;)*100 FROM rentals; . What is the average duration of a non-cancelled rental? | . To calculate the average duration, it is necessary to get the difference between the time the rental was finished and the time it was created, then multiply accordingly to obtain the result in days, hours, minutes, etc. The following query shows thee average duration of a non-cancelled rental in minutes: . SELECT AVG(CAST((JULIANDAY(finished_at)-julianday(created_at))*24*60 as REAL)) as Duration from rentals WHERE state=&#39;finished&#39;; . 2. Extended process . In the following, I will describe and answer the queries proposed by Jan. I used SQLite, which might differ slightly from the SQL used at periscope. . Checking the data . First, it is important to check the data, to see if it is consistent and if there are any odd values that might affect the queries in the future. Answers will be answered below. . Create table . First I start by creating the table rentals, in case it has not been created yet. for that I use the query: . CREATE TABLE IF NOT EXISTS rentals ( id INTEGER PRIMARY KEY, created_at TEXT, finished_at TEXT, state TEXT, user_id INTEGER, bike_id INTEGER); . The fields created_at and finished_at on some SQL could be simply defined with the type DATETIME or TIMESTAMP, however, due to the formatting of the dates on the .csv file, they have to be initialized as TEXT, which will be formatted in a few steps below. . import pandas as pd from pathlib import Path Path(&#39;my_data.db&#39;).touch() import sqlite3 conn = sqlite3.connect(&#39;my_data.db&#39;) c = conn.cursor() c.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS rentals ( id INTEGER PRIMARY KEY, created_at TEXT, finished_at TEXT, state TEXT, user_id INTEGER, bike_id INTEGER )&#39;&#39;&#39;); . Import csv file into table . It is time to populate the table, and a sample of this one is shown below . import pandas as pd # load the data into a Pandas DataFrame rentals = pd.read_csv(&#39;/Users/enriqueqs/Downloads/donkey_rentals_assignment - rentals.csv&#39;) # write the data to a sqlite table rentals.to_sql(&#39;rentals&#39;, conn, if_exists=&#39;append&#39;, index = False) pd.read_sql_query(&#39;&#39;&#39;SELECT * FROM rentals&#39;&#39;&#39;, conn).sample(5) . id created_at finished_at state user_id bike_id . 1857 2620040 | 2020-06-01 16:32:12 | 2020-06-01 19:14:21 | finished | 1404576 | 16689 | . 3424 2629600 | 2020-06-04 9:38:23 | 2020-06-04 9:46:55 | finished | 1241684 | 20149 | . 4206 2634387 | 2020-06-05 19:31:56 | 2020-06-05 19:54:46 | finished | 1397938 | 17030 | . 905 2615095 | 2020-05-31 15:04:10 | 2020-05-31 16:46:44 | finished | 650934 | 9593 | . 1465 2617682 | 2020-06-01 9:53:00 | 2020-06-01 18:26:08 | finished | 1372562 | 15842 | . Check for null values . Checking if there is any row in the data with null values (i.e. checking if the data is corrupted . pd.read_sql_query(&#39;&#39;&#39;SELECT * FROM rentals WHERE coalesce(id , created_at, finished_at, state, user_id, bike_id) IS NULL&#39;&#39;&#39;, conn) . id created_at finished_at state user_id bike_id . Formating timestamps . The timestamps are in the format 2020-06-04 9:38:23 when they should be in the form 2020-06-04 09:38:23 (hour should be 09 and not only 9). So, the text has to be formatted: . c.execute(&#39;&#39;&#39;update rentals set created_at=case when substr(created_at,13,1) =&#39;:&#39; then (substr(created_at,1,11) || &#39;0&#39; || substr(created_at,12,7) ) else created_at end&#39;&#39;&#39;) c.execute(&#39;&#39;&#39;update rentals set finished_at=case when substr(finished_at,13,1) =&#39;:&#39; then (substr(finished_at,1,11) || &#39;0&#39; || substr(finished_at,12,7) ) else finished_at end&#39;&#39;&#39;) pd.read_sql_query(&#39;&#39;&#39;SELECT * FROM rentals&#39;&#39;&#39;, conn).sample(5) . id created_at finished_at state user_id bike_id . 4914 2638869 | 2020-06-07 08:13:30 | 2020-06-07 09:11:09 | finished | 339682 | 8757 | . 1894 2620262 | 2020-06-01 17:19:28 | 2020-06-02 03:01:10 | cancelled | 1239844 | 9612 | . 3505 2630092 | 2020-06-04 12:52:15 | 2020-06-04 13:39:11 | finished | 615818 | 13897 | . 2478 2623826 | 2020-06-02 16:00:02 | 2020-06-02 17:22:59 | finished | 1381080 | 16463 | . 3517 2630164 | 2020-06-04 13:23:26 | 2020-06-04 14:42:37 | finished | 275402 | 24100 | . And now, the dates can be defined as TIMESTAMP: . c.execute(&#39;&#39;&#39;ALTER TABLE rentals RENAME TO _rentals_old&#39;&#39;&#39;) c.execute(&#39;&#39;&#39;CREATE TABLE rentals ( id INTEGER PRIMARY KEY, created_at TIMESTAMP, finished_at TIMESTAMP, state TEXT, user_id INTEGER, bike_id INTEGER )&#39;&#39;&#39;) c.execute(&#39;&#39;&#39;INSERT INTO rentals (id, created_at, finished_at, state, user_id, bike_id) SELECT id, created_at, finished_at, state, user_id, bike_id FROM _rentals_old&#39;&#39;&#39;) c.execute(&#39;&#39;&#39;DROP TABLE _rentals_old&#39;&#39;&#39;) pd.read_sql_query(&#39;&#39;&#39;SELECT * FROM rentals&#39;&#39;&#39;, conn).sample(5) . id created_at finished_at state user_id bike_id . 3027 2627200 | 2020-06-03 14:40:59 | 2020-06-03 14:53:11 | finished | 785770 | 24144 | . 3643 2630932 | 2020-06-04 16:53:41 | 2020-06-04 16:59:02 | finished | 1399930 | 4652 | . 1872 2620130 | 2020-06-01 16:49:53 | 2020-06-01 17:15:34 | finished | 831640 | 8768 | . 978 2615336 | 2020-05-31 15:43:34 | 2020-05-31 15:46:19 | cancelled | 420704 | 7535 | . 2619 2624692 | 2020-06-02 18:59:39 | 2020-06-02 19:32:13 | finished | 1375662 | 5124 | . Time to answer the questions . Which user_id made the most rentals? . The query used for this purpose is: . SELECT user_id, count(distinct id) as &#39;# of rentals&#39; FROM rentals GROUP BY user_id ORDER BY count(distinct id) DESC LIMIT 2 . pd.read_sql_query(&#39;&#39;&#39;SELECT user_id, count(distinct id) as &#39;# of rentals&#39; FROM rentals GROUP BY user_id ORDER BY count(distinct id) DESC LIMIT 2&#39;&#39;&#39;, conn, index_col=&#39;user_id&#39;) . # of rentals . user_id . 1402314 13 | . 1405150 10 | . 1408906 9 | . However, the latter result takes into account the canceled rentals. Which one can regard as not true rentals. The result below shows the top 2 user_id with the most rentals by executing the query: . SELECT user_id, count(distinct id) as &#39;# of rentals&#39; FROM rentals WHERE state=&quot;finished&quot; GROUP BY user_id ORDER BY count(distinct id) DESC LIMIT 2 . pd.read_sql_query(&#39;&#39;&#39;SELECT user_id, count(distinct id) as &#39;# of rentals&#39; FROM rentals WHERE state=&quot;finished&quot; GROUP BY user_id ORDER BY count(distinct id) DESC LIMIT 2&#39;&#39;&#39;, conn, index_col=&#39;user_id&#39;) . # of rentals . user_id . 1402314 12 | . 1385446 7 | . 1395354 6 | . bike_id with more rentals . This result is excluding cancelled rentals and the query is: . SELECT bike_id, count(distinct id) as &#39;# of rentals&#39; FROM rentals WHERE state=&quot;finished&quot; GROUP BY bike_id ORDER BY count(distinct id) DESC LIMIT 3; . pd.read_sql_query(&#39;&#39;&#39;SELECT bike_id, count(distinct id) as &#39;# of rentals&#39; FROM rentals WHERE state=&quot;finished&quot; GROUP BY bike_id ORDER BY count(distinct id) DESC LIMIT 3&#39;&#39;&#39;, conn,index_col=&#39;bike_id&#39;) . # of rentals . bike_id . 15762 10 | . 15751 9 | . 15458 7 | . What %-share of the total number of rentals was cancelled? . The query to answer this is: . SELECT AVG(state=&#39;cancelled&#39;)*100 FROM rentals; . print(&#39;The percentage share of the total number of rentals that was cancelled is: {}%&#39;.format( c.execute(&#39;&#39;&#39;SELECT AVG(state=&#39;cancelled&#39;)*100 FROM rentals&#39;&#39;&#39;).fetchall()[0][0])) . The percentage share of the total number of rentals that was cancelled is: 11.12% . Average duration of a non-cancelled rental . Below it is shown the average duration of a non-cancelled rental in minutes, by executing the query: . SELECT AVG(CAST((JULIANDAY(finished_at)-julianday(created_at))*24*60 as REAL)) as Duration from rentals WHERE state=&#39;finished&#39;; . pd.read_sql_query(&#39;&#39;&#39;SELECT AVG(CAST((JULIANDAY(finished_at)-julianday(created_at))*24*60 as REAL)) as Duration from rentals WHERE state=&#39;finished&#39; &#39;&#39;&#39;, conn) . Duration . 0 173.280318 | .",
            "url": "https://enriqueqs.github.io/blog/2020/11/06/DRqueries.html",
            "relUrl": "/2020/11/06/DRqueries.html",
            "date": " • Nov 6, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://enriqueqs.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://enriqueqs.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://enriqueqs.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://enriqueqs.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}